<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Agency Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      font-family: 'Satoshi', sans-serif;
      background-color: #f8f9fa;
      margin: 0;
      padding: 0;
      color: #333;
    }html {
  font-size: 16px;
}@media (max-width: 480px) {
  html {
    font-size: 14px;
  }
}
    .dashboard-container {
      max-width: 1000px;
      margin: auto;
      padding: 30px 20px;
    }
    h2 {
      text-align: center;
      margin-bottom: 30px;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }
    .card {
      background-color: #25D366;
      color: white;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 2px 2px 8px rgba(0,0,0,0.2);
    }
    .card h4 {
      margin-bottom: 10px;
      font-size: 18px;
    }
    .escort-list {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
    }
    .escort-list h3 {
      margin-bottom: 15px;
    }
    .escort-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
    }
    .escort-item:last-child {
      border-bottom: none;
    }
    .actions {
      margin-top: 30px;
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }
    .actions button {
      flex: 1;
      padding: 12px;
      background-color: #128C7E;
      color: white;
      border: none;
      border-radius: 6px;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .actions button:hover {
      background-color: #0e6f63;
    }.actions button {
      min-width: 120px;
    }
   .modal-overlay {
      opacity: 0;
      transition: opacity 0.3s ease;
      pointer-events: none;
      display: none;
      width: 100%;
      min-height: 100vh;
      justify-content: center; 
      align-items: center;
      position: fixed;
      inset: 0;
}

.modal-overlay.active {
  display: flex;
  opacity: 1;
  pointer-events: auto;
}
.modal-content {
  background-color: #fff;
  padding: 30px;
  border-radius: 8px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;;
  max-width: 500px;
  box-shadow: 2px 2px 10px rgba(0,0,0,0.3);
  position: relative;
}.modal-content form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}
.modal-content #addEscortForm .form-step {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.modal-content h3 {
  margin-bottom: 10px;
  font-size: 20px;
  color: #128C7E;
  text-align: center;
}

.modal-content input,
.modal-content select {
  padding: 10px 12px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 15px;
  font-family: inherit;
  transition: border-color 0.3s ease;
}

.modal-content input:focus,
.modal-content select:focus {
  border-color: #25D366;
  outline: none;
}

.modal-content button[type="submit"],
 .step {
  padding: 12px;
  background-color: #25D366;
  color: white;
  border: none;
  border-radius: 6px;
  font-weight: bold;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
}

.modal-content button[type="submit"]:hover,
  .step {
  background-color: #1da851;
}
.close-btn {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 24px;
  cursor: pointer;
  color: #333;
}#previewImage {
  max-width: 100%;
  max-height: 200px;
  object-fit: cover;
  border-radius: 6px;
  box-shadow: 1px 1px 6px rgba(0,0,0,0.1);
  margin-top: -5px;
}
.error-message {
    color: red;
    font-size: 0.85em;
    margin-top: 4px;
    display: block;
  }

  button[disabled] {
    opacity: 0.6;
    background: #ccc;
    cursor: not-allowed;
  }.progress-bar {
  width: 100%;
  height: 8px;
  background-color: #eee;
  border-radius: 4px;
  margin-bottom: 20px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  width: 50%; /* Start at 50% for step 1 */
  background-color: #25D366;
  transition: width 0.3s ease;
}.escort-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
}

@media (max-width: 480px) {
  .modal-content {
    padding: 20px 15px;
    font-size: 14px;
  }
}

  </style>
</head>
<body>
  <!-- Add this inside your <body> -->
<div class="dashboard-container">
  <h2>Welcome, Raha Agency</h2>

  <div class="stats-grid">
  <div class="card">
    <h4>Total Escorts</h4>
    <p id="totalEscorts">0</p>
  </div>

  <div class="card">
    <h4>Verified Escorts</h4>
    <p id="verifiedEscorts">0</p>
  </div>

  <div class="card">
    <h4>Pending Verifications</h4>
    <p id="pendingEscorts">0</p>
  </div>

  <div class="card">
    <h4>Bookings This Week</h4>
    <p id="weeklyBookings">0</p>
  </div>
</div>

  <div class="escort-list">
    <h3>Managed Escorts</h3>
    <div id="escortContainer"></div>
  </div>

  <div class="actions">
    <button onclick="openModal()">Add New Escort</button>
    <button>View Bookings</button>
    <button><a href="/logout" style="color: #fff; text-decoration: none;">Logout</a></button>
    <!-- <button>View Analytics</button> -->
  </div>
</div>

<!-- 🚨 Modal Overlay -->
<div id="escortModal" class="modal-overlay">
  <div class="modal-content">
    <div class="progress-bar">
    <div class="progress-fill" id="progressFill"></div>
  </div>

    <span class="close-btn" onclick="closeModal()">&times;</span>
    <form id="addEscortForm">
      <div class="form-step" id="stepOne">
        <h3>Add New Escort – Step 1</h3>
        <input type="text" id="name" name="name" placeholder="Escort Name" required />
        <input type="email" id="email" name="email" placeholder="Escort Email" required />
        <select name="gender" required id="gender">
          <option value="" disabled selected hidden>Select Gender</option>
          <option value="Female">Female</option>
          <option value="Male">Male</option>
          <option value="Transgender">Transgender</option>
        </select>
        <input type="text" id="weight" name="weight" placeholder="Weight (e.g. 60kg)" required />
        <span id="weightError" class="error-message"></span>
        <input type="date" id="dob" name="dob" required />
        <span id="dobError" class="error-message"></span>
        <input type="text" id="phone" name="phone" placeholder="Phone Number" required />
        <span id="phoneError" class="error-message"></span>
        <select name="orientation" required id="orientation">
          <option value="" disabled selected hidden>Select Orientation</option>
          <option value="Straight">Straight</option>
          <option value="Gay">Gay</option>
          <option value="Bisexual">Bisexual</option>
          <option value="Other">Other</option>
        </select>
        <select name="city" id="city" required>
          <option value="" disabled hidden selected>Select City</option>
          <option value="Nairobi">Nairobi</option>
          <option value="Kiambu">Kiambu</option>
        </select>
        <select name="areaLabel" id="location">
          <option value="" disabled hidden selected>Select location</option>
        </select>
        <h4>🧾 What services do you offer?</h4>
        <select name="services" id="services" required multiple show="2">
          <option value="DINNER DATE">DINNER DATE</option>
          <option value="TRAVEL COMPANION">TRAVEL COMPANION</option>
          <option value="RIMMING">SEXY LIVE CALLS</option>
          <option value="GIRLFRIEND EXPERIENCE">GIRLFRIEND EXPERIENCE</option>
          <option value="MASSAGE">MASSAGE</option>
          <option value="LESBIAN SHOW">LESBIAN SHOW</option>
          <!-- 
          <option value="CUM ON BODY">CUM ON BODY</option>
          <option value="CUM IN MOUTH">CUM IN MOUTH</option>
          <option value="3 SOME">3 SOME</option>
          <option value="ANAL">ANAL</option>
          <option value="RAW BJ">RAW BJ</option>
           -->
        </select>
        <button type="button" onclick="goToStepTwo()" class="step" id="one" disabled>Next</button>
      </div>

      <div class="form-step" id="stepTwo" style="display:none">
        <h3>Upload Escort Photo – Step 2</h3>
        <label for="photoInput">Escort Photo</label>
        <input type="file" name="userImg" id="photoInput" accept="image/*" required />
        <img id="previewImage" />
        <button type="button" class="step" onclick="goToStepOne()">Back</button>
        <button type="submit">Add Escort</button>
      </div>
    </form>
  </div>
</div>
<script>
  let base64Image = '';
  document.getElementById('one').disabled = true;
function goToStepTwo() {
  document.getElementById('stepOne').style.display = 'none';
  document.getElementById('stepTwo').style.display = 'flex';
  document.getElementById('progressFill').style.width = '100%';
}

function goToStepOne() {
  document.getElementById('stepTwo').style.display = 'none';
  document.getElementById('stepOne').style.display = 'flex';
  document.getElementById('progressFill').style.width = '50%';
}

document.getElementById('photoInput').addEventListener('change', function () {
  const file = this.files[0];
  if (!file) return;
  if (!file.type.startsWith('image/')) {
  alert('Please select a valid image file.');
  return;
  }

  if (file.size > 2 * 1024 * 1024) {
    alert('Image size should be less than 2MB.');
    return;
  }

  const reader = new FileReader();
  reader.onload = function () {
    base64Image = reader.result;
    document.getElementById('previewImage').src = base64Image;
    document.getElementById('previewImage').style.display = 'block';
  };
  reader.readAsDataURL(file);
});

const escortModal = document.getElementById('escortModal');

function openModal() {
  document.querySelector('#addEscortForm input[name="name"]').focus();
  escortModal.classList.add('active');
  document.body.style.overflow = 'hidden';
}

function closeModal() {
  escortModal.classList.remove('active');
  document.body.style.overflow = '';
  form.reset();
  document.getElementById('stepTwo').style.display = 'none';
  document.getElementById('stepOne').style.display = 'flex';
  document.getElementById('previewImage').style.display = 'none';
  base64Image = '';
}

const locationMap = {
    Nairobi: [
      "Kilimani", "Westlands", "Karen", "CBD", "Roysambu", "Ngara", "Donholm", "Nairobi West","Donholm", "Dandora", "Ojijo", "Yaya", "Sarit",
      "Ruaka", "Syokimau", "Kitengela", "Embakasi", "South B", "South C", "Lavington", "Parklands"
    ],
    Kiambu: [
      "Juja", "Kikuyu", "Ruiru", "Githurai",
      "Thika", "Limuru", "Kabete", "Tigoni"
    ],
    Mombasa: [
      "Diani", "Nyali", "Likoni",
      "Mtwapa", "Bamburi", "Shanzu", "Kisauni"
    ],
    Nakuru: [
      "Naivasha", "Nakuru Town", "Gilgil",
      "Lanet", "Njoro", "Pipeline", "Kabarak"
    ],
    Kisumu: [
      "Kisumu Town",
      "Milimani", "Riat Hills", "Mamboleo", "Manyatta"
    ],
    Eldoret: [
      "Eldoret Town", "Langas",
      "Kapsoya", "Elgon View", "Annex", "Pioneer"
    ],
    Machakos: [
      "Athi River", "Kangundo", "Joska", "Mwala", "Syokimau"
    ],
    Laikipia: [
      "Nanyuki", "Rumuruti", "Timau"
    ],
    Kajiado: [
      "Ongata Rongai", "Kitengela", "Ngong", "Kiserian"
    ],
    Kilifi: [
      "Kilifi Town", "Malindi", "Watamu", "Mtwapa"
    ],
    UasinGishu: [
      "Eldoret", "Turbo", "Moiben"
    ],
    Kisii: [
      "Kisii Town", "Nyanchwa", "Suneka"
    ],
    Kakamega: [
      "Kakamega Town", "Shinyalu", "Lurambi"
    ]
};
const citySelect = document.getElementById("city");
const areaSelect = document.getElementById("location");

citySelect.addEventListener("change", () => {
  const areas = locationMap[citySelect.value] || [];
  areaSelect.innerHTML = '<option value="" disabled selected hidden>Select Area</option>';
  areas.forEach(area => {
    const option = document.createElement("option");
    option.value = area;
    option.textContent = area;
    areaSelect.appendChild(option);
  });
});

function clearMessages() {
  const oldMessages = form.querySelectorAll('.form-feedback');
  oldMessages.forEach(msg => msg.remove());
}

const form = document.getElementById('addEscortForm');
const submitBtn = form.querySelector('button[type="submit"]');
document.getElementById('addEscortForm').addEventListener('submit', async (e) => {
  e.preventDefault();

  const form = e.target;
  const submitBtn = form.querySelector('button[type="submit"]');

  submitBtn.disabled = true;
  submitBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Adding...';

  const formData = new FormData(form);
  const escort = Object.fromEntries(formData.entries());
  escort.userImg = base64Image;

  try {
    const res = await fetch('/api/agency/add-escort', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(escort)
    });

    const data = await res.json();

    if (!res.ok || !data.success) {
      throw new Error(data.message || 'Failed to add escort');
    }

    // ✅ Success feedback
   clearMessages();
    const successMsg = document.createElement('div');
    successMsg.textContent = 'Escort added successfully!';
    successMsg.className = 'form-feedback';
    successMsg.style.color = 'green';
    form.appendChild(successMsg);

    setTimeout(() => successMsg.remove(), 3000);

    form.reset();
    document.getElementById('photoInput').value = '';
    document.getElementById('previewImage').style.display = 'none';
    base64Image = '';
    closeModal();
    fetchEscorts();

  } catch (err) {
    console.error('Escort submission error:', err);

    // ❌ Inline error feedback
    const errorMsg = document.createElement('div');
    errorMsg.textContent = err.message || 'Something went wrong. Please try again.';
    errorMsg.style.color = 'red';
    form.appendChild(errorMsg);
    setTimeout(() => errorMsg.remove(), 4000);
  } finally {
    submitBtn.disabled = false;
    submitBtn.innerHTML = 'Add Escort';
  }
});


function validateForm() {
   if(document.querySelector('#name').value && document.querySelector('#email').value && document.querySelector('#gender').value && document.querySelector('#weight').value && document.querySelector('#dob').value && document.querySelector('#phone').value && document.querySelector('#orientation').value && document.querySelector('#city').value && document.querySelector('#location').value) {
    document.getElementById('one').disabled = false;
  } else {
    document.getElementById('one').disabled = true;
  }
  let isValid = true;

  // Age check
  const dobInput = form.dob;
  const dobError = document.getElementById('dobError');
  const dob = new Date(dobInput.value);
  const today = new Date();
  const age = today.getFullYear() - dob.getFullYear();
  if (isNaN(dob.getTime()) || age < 18 || (age === 18 && today < new Date(dob.setFullYear(today.getFullYear())))) {
    dobError.textContent = 'Escort must be at least 18 years old.';
    isValid = false;
  } else {
    dobError.textContent = '';
  }

  // Weight check
  const weightInput = form.weight;
  const weightError = document.getElementById('weightError');
  const weight = parseFloat(weightInput.value);
  if (isNaN(weight) || weight < 55 || weight > 100) {
    weightError.textContent = 'Weight must be between 55kg and 100kg.';
    isValid = false;
  } else {
    weightError.textContent = '';
  }

  // Phone check
  const phoneInput = form.phone;
  const phoneError = document.getElementById('phoneError');
  const phone = phoneInput.value.trim();
  const kenyaPhoneRegex = /^(?:\+254|254|0)?(7\d{8})$/;
  if (!kenyaPhoneRegex.test(phone)) {
    phoneError.textContent = 'Enter a valid Kenyan phone number.';
    isValid = false;
  } else {
    phoneError.textContent = '';
  }

  submitBtn.disabled = !isValid;
}

form.addEventListener('input', validateForm);
 

const escortContainer = document.getElementById('escortContainer');

async function fetchEscorts() {
  const res = await fetch('/api/agency/escorts');
  const result = await res.json();
  const escorts = result.escorts || []

  escortContainer.innerHTML = '';
  if(!escorts || escorts.length === 0) return;
    escorts.forEach(escort => {
    const div = document.createElement('div');
    div.className = 'escort-item';
    div.innerHTML = `
      ${escort.name} – ${escort.areaLabel} – ${escort.isVerified ? 'Verified' : 'Pending'}
      <button onclick="deleteEscort('${escort._id}')" style="float:right; background:red; color:white; border:none; padding:5px 10px; border-radius:4px;">Delete</button>
      <a href="/analytics/${escort._id}" style="float:right; margin-right:10px; background:#128C7E; color:white; padding:5px 10px; border-radius:4px; text-decoration:none;">Analytics</a>
    `;
    escortContainer.appendChild(div);
  });

  updateStats(escorts);
}

function updateStats(escorts) {
  const total = escorts.length;
  const verified = escorts.filter(e => e.isVerified).length;
  const pending = total - verified;
  // const weeklyBookings = escorts.reduce((sum, e) => sum + (e.weeklyBookings || 0), 0);
  // document.getElementById('weeklyBookings').textContent = weeklyBookings;

  document.getElementById('totalEscorts').textContent = total;
  document.getElementById('verifiedEscorts').textContent = verified;
  document.getElementById('pendingEscorts').textContent = pending;

  // You can add logic for bookings if you have that data
}

async function deleteEscort(id) {
  if (!confirm('Are you sure you want to delete this escort?')) return;

  const res = await fetch(`/api/agency/escort/${id}`, { method: 'DELETE' });
  const data = await res.json();
  if (data.success) {
    fetchEscorts();
  } else {
    alert('Failed to delete escort');
  }
}

fetchEscorts();
</script>
</body>
</html>
