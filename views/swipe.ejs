<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Swipe Escorts | Raha</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    *{
        padding: 0;
        margin: 0;
        box-sizing: border-box;
        overflow-x: hidden;
    }
    html,body
     {
         margin: 0; 
         font-family: sans-serif; 
         background: #f1f1f1; 
         max-width: 100vw;
         overflow-x: hidden; }
    #deck { 
        position: relative; 
        width: 100%; height: 100vh;
         display: flex;
          justify-content: center; 
          align-items: center; 
          overflow-x: hidden}
    .card {
      position: absolute;
      width: 90%;
      max-width: 300px;
      height: 480px;
      background: white;
      border-radius: 16px;
      box-shadow: 2px 2px 8px rgba(0,0,0,0.2);
      transition: transform 0.3s ease, opacity 0.3s ease;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      z-index: 10;
    }
    .card:hover {
    transform: scale(1.02);
    }

    .swipe-card.swipe-left {
  transform: translateX(-1200px) rotate(-20deg) scale(0.8);    
  opacity: 0;
    }

    .swipe-card.swipe-right {
    transform: translateX(1200px) rotate(20deg) scale(0.8);    
    opacity: 0;
    }

    .card img {
      width: 100%;
      height: 280px;
      object-fit: cover;
      border-radius: 12px;
    }
    .card h3 { margin: 8px 0 0; }
    .card p { font-size: 0.9rem; color: #444; }
    .hidden { display: none; }
    .swipe-actions {
        display: flex;
        justify-content: space-around;
        margin-top: 20px;
}
  </style>
</head>
<body>
  <div id="deck">
    <% escorts.forEach((escort, index) => { %>
      <div class="card swipe-card" style="z-index: <%= escorts.length - index %>;">
        <img src="<%= escort.userImg %>" alt="<%= escort.name %>" loading="lazy">
        <h3><%= escort.name %></h3>
        <p><%= escort.about %></p>
        <div class="swipe-actions">
          <button class="pass-btn">‚ùå</button>
          <button class="contact-btn">üìû</button>
          <button class="like-btn">‚úÖ</button>
        </div>
      </div>
    <% }) %>
  </div>
    <!-- This is your fallback message -->
  <div id="fallback" style="text-align:center; margin-top:20px; display:none;">
    <h3>No more profiles to swipe</h3>
    <p>Showing previously viewed ones</p>
  </div>

  


  <script>
//     naigator.geolocation.getCurrentPosition(position => {
//   const { latitude, longitude } = position.coords;
//   fetch(`/nearby?lat=${latitude}&lng=${longitude}&distance=3000`)
//     .then(res => res.json())
//     .then(data => {
//       // render list of nearby escorts
//     });
// });
  function setupSwipe() {
    const deck = document.getElementById('deck');
    const cards = document.querySelectorAll('.card');

    cards.forEach((card, index) => {
      let isDragging = false;
      let startX = 0;
      let currentDeltaX = 0;

      // Set proper stack order
      card.style.zIndex = cards.length - index;

      const resetCard = () => {
        card.style.transition = 'transform 0.4s ease';
        card.style.transform = 'translateX(0) rotate(0deg) scale(1)';
      };

      const handleSwipe = (deltaX) => {
        const threshold = 100;

        card.style.transition = 'transform 0.4s ease, opacity 0.4s ease';

        if (deltaX > threshold) {
          card.classList.add('swipe-right');
        } else if (deltaX < -threshold) {
          card.classList.add('swipe-left');
        } else {
          resetCard();
          return;
        }

        const nextCard = card.nextElementSibling;
        if (nextCard) nextCard.style.transform = 'scale(1.02)';

        // Remove card after transition ends
        card.addEventListener('transitionend', () => {
          card.remove();
          if(!deck.querySelector('.card')){
            document.getElementById('fallback').style.display = 'block';
          }
        }, { once: true });
      };

      // Mouse events
      card.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX;
        card.style.transition = 'none';
      });

      card.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        currentDeltaX = e.clientX - startX;
        card.style.transform = `translateX(${currentDeltaX}px) rotate(${currentDeltaX / 20}deg) scale(${1 - Math.abs(currentDeltaX) / 1000})`;
      });

      card.addEventListener('mouseup', () => {
        if (!isDragging) return;
        isDragging = false;
        handleSwipe(currentDeltaX);
      });

      // Touch events
      card.addEventListener('touchstart', (e) => {
        isDragging = true;
        startX = e.touches[0].clientX;
        card.style.transition = 'none';
      });

      card.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        currentDeltaX = e.touches[0].clientX - startX;
        card.style.transform = `translateX(${currentDeltaX}px) rotate(${currentDeltaX / 20}deg) scale(${1 - Math.abs(currentDeltaX) / 1000})`;
      });

      card.addEventListener('touchend', () => {
        if (!isDragging) return;
        isDragging = false;
        handleSwipe(currentDeltaX);
      });
    });
  }

  // Initialize on page load
  setupSwipe();
</script>

</body>
</html>
